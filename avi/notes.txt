# need to work out how to construct a tree of related JSON schema objects
# this needs to work at the current scope
# Start off small, with a reference to a single Object
-- Break out into a tree, with levels

# type
reads apispec.json
constructs tree dictionary of path levels
outputs as json to stdout
./type.js

# path
reads apispec.json
lists each available path to stdout
further params to filter
output raw put,post,get,delete syntax to stdout

# define
point at a single object
resolve and compile all parameters at current level (dont recurse schemas)

# path.list
list all available paths
accept a filter argument to restrict list
print resulting list to stdout

# path.children
point at a single path
resolve to all subpaths based on URI structure

# path.objects
point at a single path
resolve to all objects that this path references
organise as a tree heirarchy, level 1, level 2 etc
loop prevention?

# object.parents
point at a single object
resolve to all objects that reference this object (parents)
- maintain an object chain to break a loop

# object.children
point at a single object
resolve to all objects are referenced from this object (children)
- maintain an object chain to break a loop

# object.list
list all available objects
accept a filter argument to restrict list
print resulting list to stdout

# object.paths
point at a single object
resolve to all paths that directly reference this object
resolve object tree to determine deduped children list
resolve to all paths that indirectly reference this object

# object.show
returns a table of all objects in tabular format
determines all post/put/get requests against each by iteratively calling object.paths(item)
